k_d <- ggplot(Glass, aes(K, color=Type)) + geom_density()
ca_d <- ggplot(Glass, aes(Ca, color=Type)) + geom_density()
ba_d <- ggplot(Glass, aes(Ba, color=Type)) + geom_density()
fe_d <- ggplot(Glass, aes(Fe, color=Type)) + geom_density()
ri_d+na_d+mg_d+al_d+si_d+k_d+ca_d+ba_d+fe_d+
plot_layout(ncol=3)
corrplot::corrplot(cor(Glass[c("RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe")]), method = 'number', type = 'lower')
library(mlbench)
data(Soybean)
head(Soybean)
summary(Soybean)
## See ?Soybean for details
col_names <- colnames(Soybean[-1])
plot_list <- list()
for (i in col_names){
plot <- ggplot(Soybean, aes_string(Soybean[,i])) +
geom_bar() +
xlab(colnames(Soybean[i]))
plot_list[[i]] <- plot
#print(plot)
}
grid.arrange(grobs=plot_list, ncol=4)
library(mice)
library(VIM)
md.pattern(Soybean)
aggr(Soybean, col=c('navyblue','yellow'),
numbers=TRUE, sortVars=TRUE,
labels=names(Soybean), cex.axis=.7,
gap=3, ylab=c("Missing data","Pattern"))
impute_soybean <- parlmice(Soybean, maxit = 5, m = 1, printFlag = FALSE, seed = 500, cluster.seed = 500)
Soybean_2 <- complete(impute_soybean,1)
#original Soybean data
summary(Soybean)
#imputed soybean data
summary(Soybean_2)
col_names <- colnames(Soybean_2[-1])
plot_list <- list()
for (i in col_names){
plot <- ggplot(Soybean_2, aes_string(Soybean_2[,i])) +
geom_bar() +
xlab(colnames(Soybean_2[i]))
plot_list[[i]] <- plot
#print(plot)
}
grid.arrange(grobs=plot_list, ncol=4)
help(pigs)
pigs %>% autoplot()
#estimate parameter - the next four months
fc<- ses(pigs, h=4)
#timeseries plot with autoplot() function
fc %>%
autoplot()
summary(fc)
y_hat <- c(1.96, -1.96)
s <- sd(residuals(fc))
ses(pigs, h=4)$mean[1]+(y_hat*s)
myses <- function(y, alpha, level) {
# set initial estimated y with level
y_hat <- level
# traverse elements of series
for(i in 1:length(y)) {
# calculate the next estimated y
y_hat <- alpha * y[i] + (1 - alpha) * y_hat
}
return(y_hat)
}
optimal_alpha <- fc$model$par[1]
optimal_l0    <- fc$model$par[2]
print(optimal_alpha)
print(optimal_l0)
fc_myses <- myses(y = pigs, alpha = optimal_alpha, level = optimal_l0)
fc_ses <- ses(y = pigs, h = 4)
print(fc_myses)
print(fc_ses$mean[1])
mySSE <- function( pars = c(alpha, level), y ) {
# unpack pars array to get alpha and level values
alpha <- pars[1]
level <- pars[2]
# set initial estimated y with level
y_hat <- level
err   <- 0
SSE   <- 0
# traverse elements of series
for(i in 1:length(y)) {
# calculate error by subtracting estimated y from actual y
err <- y[i] - y_hat
# sum up and accumulate squared errors
SSE <- SSE + err ^ 2
# calculate the next estimated y
y_hat <- alpha * y[i] + (1 - alpha) * y_hat
}
return(SSE)
}
result_mySSE <- optim( par = c(0.5, pigs[1]), y = pigs, fn = mySSE )
mySSE_optimal_alpha <- result_mySSE$par[1]
mySSE_optimal_l0    <- result_mySSE$par[2]
ses_optimal_alpha   <- fc_ses$model$par[1]
ses_optimal_l0      <- fc_ses$model$par[2]
url_img <- "https://otexts.com/fpp2/fpp_files/figure-html/wnacfplus-1.png"
c(2, -2) / sqrt(36)
c(2, -2) / sqrt(360)
c(2, -2) / sqrt(1000)
library(fma)
ibmclose %>% ggtsdisplay(main="")
ibmclose %>% diff() %>% ggtsdisplay(main="")
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.6*y[i-1] + e[i]
sim1 <- ts(e)
sim1 %>% autoplot()
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 0.1*y[i-1] + e[i]
sim2 <- ts(e)
sim2 %>% autoplot()
y <- ts(numeric(100))
e <- rnorm(100)
for(i in 2:100)
y[i] <- 1.0*y[i-1] + e[i]
sim3 <- ts(e)
sim3 %>% autoplot()
y <- ts(numeric(100))
e <- rnorm(100, sd = 1)
e[1] <- 0
for(i in 2:100)
y[i] <- 0.6*e[i-1] + e[i]
sim_c <- ts(e)
sim_c %>% autoplot()
library(ggfortify)
library(openxlsx)
library(fpp2)
library(fma)
library(gridExtra)
library(seasonal)
library(ggplot2)
library(patchwork)
library(caret)
library(grid)
#help function for each series using question mark "??"
??gold
#help function for each series using question mark "??"
??woolyrnq
#help function for each series using question mark "??"
??gas
#autoplots of each series
grid.arrange(autoplot(gold),autoplot(woolyrnq),autoplot(gas))
#frequency of each series
frequency(gold)
frequency(woolyrnq)
frequency(gas)
paste0("The frequency for the gold time series is: ", frequency(gold), "  - where the data represents an ANNUAL observations.")
paste0("The frequency for wool production time series is: ", frequency(woolyrnq), " - where the data represents QUARTERLY observations.")
paste0("The frequency for gas production time series is: ",  frequency(gas), " - where the data represents MONTHLY observations.")
#calling which.max() function
which.max(gold)
#printing maximum value
gold[which.max(gold)]
retaildata <- read.xlsx("https://otexts.com/fpp2/extrafiles/retail.xlsx",startRow = 2)
myts <- ts(retaildata[,"A3349873A"],
frequency=12, start=c(1982,4))
#myts  #code is silent because it represents an example - see "myts2"
myts2 <- ts(retaildata[,"A3349791W"],
frequency=12, start=c(1982,4))
myts2
#time series qutoplot
autoplot(myts2)
#time series seasonal plot
ggseasonplot(myts2)
#time series sub series plot
ggsubseriesplot(myts2)
#time series lag plot
gglagplot(myts2)
#time series ACF
ggAcf(myts2)
#autoplot(), ggseasonplot(), ggsubseriesplot(), gglagplot(), ggAcf()
p1 <- autoplot(plastics)
p2 <- ggseasonplot(plastics)
p3 <- ggsubseriesplot(plastics)
p4 <- gglagplot(plastics)
p5 <- ggAcf(plastics)
grid.arrange(p1,p2,p3,p5,p4, ncol=1)
#multiplicative decomposition
decomp_plastics <- plastics %>%
decompose(type = "multiplicative")
decomp_plastics %>% autoplot()
autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted")
#autoplot(), ggseasonplot(), ggsubseriesplot(), gglagplot(), ggAcf()
p1 <- autoplot(plastics)
p2 <- ggseasonplot(plastics)
p3 <- ggsubseriesplot(plastics)
p4 <- gglagplot(plastics)
p5 <- ggAcf(plastics)
p1 / p2 / p3 / p5 / p4  ncol=1)
#autoplot(), ggseasonplot(), ggsubseriesplot(), gglagplot(), ggAcf()
p1 <- autoplot(plastics)
p2 <- ggseasonplot(plastics)
p3 <- ggsubseriesplot(plastics)
p4 <- gglagplot(plastics)
p5 <- ggAcf(plastics)
p1 / p2 / p3 / p5 / p4
#autoplot(), ggseasonplot(), ggsubseriesplot(), gglagplot(), ggAcf()
p1 <- autoplot(plastics)
p2 <- ggseasonplot(plastics)
p3 <- ggsubseriesplot(plastics)
p4 <- gglagplot(plastics)
p5 <- ggAcf(plastics)
p1 / p2 / p3 / p5
p4
p4
doPlots <- function(Glass, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(Glass=Glass, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
plotDen <- function(Glass, i){
data <- data.frame(x=Glass[[i]], type = Glass$Type)
df <- as.data.frame(mean(data$x))
colnames(df) <- "mean"
df$median <- median(data$x)
p <- ggplot(data= data) +
geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(Glass)[i]), '\n',
'Skewness: ',round(skewness(Glass[[i]], na.rm = TRUE), 4), '\n',
'Mean: ', round(df$mean, 4), '\n',
'Median: ', round(df$median, 4))) +
theme_light() +
geom_vline(data=df, aes(xintercept=df$mean), linetype = "dashed", size=1, colour="red") +
geom_vline(data=df, aes(xintercept=df$median), size = 1, colour="blue")
return(p)
}
doPlots(Glass, plotDen, ii=1:9, ncol=2)
doPlots <- function(Glass, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(Glass=Glass, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
plotDen <- function(Glass, i){
data <- data.frame(x=Glass[[i]], type = Glass$Type)
df <- as.data.frame(mean(data$x))
colnames(df) <- "mean"
df$median <- median(data$x)
p <- ggplot(data= data) +
geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(Glass)[i]), '\n',
'Skewness: ',round(skewness(Glass[[i]], na.rm = TRUE), 4), '\n',
'Mean: ', round(df$mean, 4), '\n',
'Median: ', round(df$median, 4))) +
theme_light() +
geom_vline(data=df, aes(xintercept=df$mean), linetype = "dashed", size=1, colour="red") +
geom_vline(data=df, aes(xintercept=df$median), size = 1, colour="blue")
return(p)
}
doPlots(Glass, plotDen, ii=1:9, ncol=2)
library(moments)
library(gridExtra)
doPlots <- function(Glass, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(Glass=Glass, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
plotDen <- function(Glass, i){
data <- data.frame(x=Glass[[i]], type = Glass$Type)
df <- as.data.frame(mean(data$x))
colnames(df) <- "mean"
df$median <- median(data$x)
p <- ggplot(data= data) +
geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(Glass)[i]), '\n',
'Skewness: ',round(skewness(Glass[[i]], na.rm = TRUE), 4), '\n',
'Mean: ', round(df$mean, 4), '\n',
'Median: ', round(df$median, 4))) +
theme_light() +
geom_vline(data=df, aes(xintercept=df$mean), linetype = "dashed", size=1, colour="red") +
geom_vline(data=df, aes(xintercept=df$median), size = 1, colour="blue")
return(p)
}
doPlots(Glass, plotDen, ii=1:9, ncol=2)
library(moments)
library(gridExtra)
doPlots <- function(Glass, fun, ii, ncol=3) {
pp <- list()
for (i in ii) {
p <- fun(Glass=Glass, i=i)
pp <- c(pp, list(p))
}
do.call("grid.arrange", c(pp, ncol=ncol))
}
plotDen <- function(Glass, i){
data <- data.frame(x=Glass[[i]], type = Glass$Type)
df <- as.data.frame(mean(data$x))
colnames(df) <- "mean"
df$median <- median(data$x)
p <- ggplot(data= data) +
geom_line(aes(x = x), stat = 'density', size = 1,alpha = 1.0) +
xlab(paste0((colnames(Glass)[i]), '\n',
'Skewness: ',round(skewness(Glass[[i]], na.rm = TRUE), 4), '\n',
'Mean: ', round(df$mean, 4), '\n',
'Median: ', round(df$median, 4))) +
theme_light() +
geom_vline(data=df, aes(xintercept=df$mean), linetype = "dashed", size=1, colour="red") +
geom_vline(data=df, aes(xintercept=df$median), size = 1, colour="blue")
return(p)
}
doPlots(Glass, plotDen, ii=1:9, ncol=2)
knitr::opts_chunk$set(echo=TRUE, warning=FALSE,
message=FALSE,
collapse = FALSE,
comment = "#>" )
library(ggfortify)
library(openxlsx)
library(fpp2)
library(fma)
library(gridExtra)
library(seasonal)
library(ggplot2)
library(patchwork)
library(caret)
library(grid)
#help function for each series using question mark "??"
??gold
#help function for each series using question mark "??"
??woolyrnq
#help function for each series using question mark "??"
??gas
#autoplots of each series
grid.arrange(autoplot(gold),autoplot(woolyrnq),autoplot(gas))
#frequency of each series
frequency(gold)
frequency(woolyrnq)
frequency(gas)
#calling which.max() function
which.max(gold)
#printing maximum value
gold[which.max(gold)]
retaildata <- read.xlsx("https://otexts.com/fpp2/extrafiles/retail.xlsx",startRow = 2)
myts <- ts(retaildata[,"A3349873A"],
frequency=12, start=c(1982,4))
#myts  #code is silent because it represents an example - see "myts2"
myts2 <- ts(retaildata[,"A3349791W"],
frequency=12, start=c(1982,4))
#time series qutoplot
autoplot(myts2)
#time series seasonal plot
ggseasonplot(myts2)
#time series sub series plot
ggsubseriesplot(myts2)
#autoplot(), ggseasonplot(), ggsubseriesplot(), gglagplot(), ggAcf()
p1 <- autoplot(plastics)
p2 <- ggseasonplot(plastics)
p3 <- ggsubseriesplot(plastics)
p4 <- gglagplot(plastics)
p5 <- ggAcf(plastics)
p1 / p2 / p3 / p5
p4
#multiplicative decomposition
decomp_plastics <- plastics %>%
decompose(type = "multiplicative")
decomp_plastics %>% autoplot()
autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted")
plasticsOutlier <- plasticsplasticsOutlier[30] <- plasticsOutlier[30] + 500autoplot(plasticsOutlier, series = "Data") +  autolayer(trendcycle(fit), series = "Trend") +  autolayer(seasadj(fit), series = "Seasonally Adjusted") +   xlab("Year") + ylab("Monthly Sales (in thousands)") +  ggtitle("Seasonally Adjusted Plastics Manufacturer Sales Data") +  scale_color_manual(values = c("blue", "green", "red"),                     breaks = c("Data", "Trend", "Seasonally Adjusted"))
plasticsOutlier <- plastics
knitr::opts_chunk$set(echo=TRUE, warning=FALSE,
message=FALSE,
collapse = FALSE,
comment = "#>" )
library(ggfortify)
library(openxlsx)
library(fpp2)
library(fma)
library(gridExtra)
library(seasonal)
library(ggplot2)
library(patchwork)
library(caret)
library(grid)
#help function for each series using question mark "??"
??gold
#help function for each series using question mark "??"
??woolyrnq
#help function for each series using question mark "??"
??gas
#autoplots of each series
grid.arrange(autoplot(gold),autoplot(woolyrnq),autoplot(gas))
#frequency of each series
frequency(gold)
frequency(woolyrnq)
frequency(gas)
#calling which.max() function
which.max(gold)
#printing maximum value
gold[which.max(gold)]
retaildata <- read.xlsx("https://otexts.com/fpp2/extrafiles/retail.xlsx",startRow = 2)
myts <- ts(retaildata[,"A3349873A"],
frequency=12, start=c(1982,4))
#myts  #code is silent because it represents an example - see "myts2"
myts2 <- ts(retaildata[,"A3349791W"],
frequency=12, start=c(1982,4))
#time series qutoplot
autoplot(myts2)
#time series seasonal plot
ggseasonplot(myts2)
#time series sub series plot
ggsubseriesplot(myts2)
#autoplot(), ggseasonplot(), ggsubseriesplot(), gglagplot(), ggAcf()
p1 <- autoplot(plastics)
p2 <- ggseasonplot(plastics)
p3 <- ggsubseriesplot(plastics)
p4 <- gglagplot(plastics)
p5 <- ggAcf(plastics)
p1 / p2 / p3 / p5
p4
#multiplicative decomposition
decomp_plastics <- plastics %>%
decompose(type = "multiplicative")
decomp_plastics %>% autoplot()
autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted")
plastics %>% decompose(type = "multiplicative") -> fit
autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted")
plastics %>% decompose(type = "multiplicative") -> fit
autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted")
plastics %>% decompose(type = "multiplicative") -> fit
autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted")
plastics_mid <- plastics
plastics_end <- plastics
plastics_mid[30] <- plastics_mid[30] + 500 #outlier in the middle
plastics_end[52] <- plastics_end[52] + 500 #outlier to reflect "near the end"
decomp_mid <- plastics_mid %>%
decompose(type = "multiplicative")
p <- autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted") +
ggtitle("Plastics Seasonally Adjusted - Original") +
theme(plot.title = element_text(size = 14))
p1 <- autoplot(plastics_mid, series = "Data") +
autolayer(trendcycle(decomp_mid), series = "Trend") +
autolayer(seasadj(decomp_mid), series = "Seasonally Adjusted") +
ggtitle("Plastics Seasonally Adjusted - Mid Observation")+
theme(plot.title = element_text(size = 14))
decomp_end <- plastics_end %>%
decompose(type = "multiplicative")
p2 <- autoplot(plastics_end, series = "Data") +
autolayer(trendcycle(decomp_end), series = "Trend") +
autolayer(seasadj(decomp_end), series = "Seasonally Adjusted") +
ggtitle("Plastics Seasonally Adjusted - Near the End Observation")+
theme(plot.title = element_text(size = 14))
grid.arrange(p, p1,p2)
plastics_mid <- plastics
plastics_end <- plastics
plastics_mid[30] <- plastics_mid[30] + 500 #outlier in the middle
plastics_end[52] <- plastics_end[52] + 500 #outlier to reflect "near the end"
decomp_mid <- plastics_mid %>%
decompose(type = "multiplicative")
p <- autoplot(plastics, series = "Data") +
autolayer(trendcycle(decomp_plastics), series = "Trend") +
autolayer(seasadj(decomp_plastics), series = "Seasonally Adjusted") +
ggtitle("Plastics Seasonally Adjusted - Original") +
theme(plot.title = element_text(size = 14))
p1 <- autoplot(plastics_mid, series = "Data") +
autolayer(trendcycle(decomp_mid), series = "Trend") +
autolayer(seasadj(decomp_mid), series = "Seasonally Adjusted") +
ggtitle("Plastics Seasonally Adjusted - Mid Observation")+
theme(plot.title = element_text(size = 14))
decomp_end <- plastics_end %>%
decompose(type = "multiplicative")
p2 <- autoplot(plastics_end, series = "Data") +
autolayer(trendcycle(decomp_end), series = "Trend") +
autolayer(seasadj(decomp_end), series = "Seasonally Adjusted") +
ggtitle("Plastics Seasonally Adjusted - Near the End Observation")+
theme(plot.title = element_text(size = 14))
grid.arrange(p, p1,p2)
head(plastics)
str(plastics)
#libraries
library(readxl)
library(tidyverse)
library(tidyverse)
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("cli")
install.packages("cli")
install.packages("cli")
#libraries
library(readxl)
library(tidyverse)
library(cli)
#libraries
library(readxl)
library(tidyverse)
